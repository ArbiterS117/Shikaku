/*******************************************************************************
* タイトル:		groundFile
* プログラム名:	groundFile.cpp
* 作成者:		GP11B132 14 ゴショウケン
********************************************************************************

/***************************************************************************
* インクルードファイル****
*******************************************************************************/
#include "groundFile.h"
#include "model.h"

/*******************************************************************************
* マクロ定義
*******************************************************************************/



/*******************************************************************************
* 構造体定義
*******************************************************************************/



/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/



/*******************************************************************************
マクロ定義
*******************************************************************************/



/*******************************************************************************
* グローバル変数
*******************************************************************************/
GROUNDSAVEDATA	save;		// セーブデータ作成場所


/*******************************************************************************
関数名:	void SaveData( void )
引数:	void
戻り値:	void
説明:	セーブデータを作成し、ファイルへ出力する
*******************************************************************************/
void SaveGroundData(void)
{
	{	// プレイヤーデータをセーブする
		PLATFORM *platform = GetPlatform();

		// プレイヤーの人数分セーブする
		for (int i = 0; i < MAX_PLATFORM; i++)
		{
			save.platform[i] = platform[i];
		}
	}

	// SAVEDATA構造体ごと全部をファイルに出力する
	FILE *fp;

	printf("\nセーブ開始・・・");
	fp = fopen("saveGrounddata.bin", "wb");			// ファイルをバイナリ書き込みモードでOpenする

	if (fp != NULL)								// ファイルがあれば書き込み、無ければ無視
	{
		fwrite(&save, 1, sizeof(GROUNDSAVEDATA), fp);	// 指定したアドレスから指定したバイト数分ファイルへ書き込む
		fclose(fp);								// Openしていたファイルを閉じる
		printf("終了！\n");
	}
	else
	{
		printf("ファイルエラー！\n");
	}

}


/*******************************************************************************
関数名:	void LoadData( void )
引数:	void
戻り値:	void
説明:	セーブデータをファイルから読み込む
*******************************************************************************/
bool LoadGroundData(void)
{
	PLATFORM *platform = GetPlatform();
	// ファイルからセーブデータを読み込む
	FILE* fp;

	printf("\nロード開始・・・");
	fp = fopen("saveGrounddata.bin", "rb");	// ファイルをバイナリ読み込みモードでOpenする

	if (fp != NULL)						// ファイルがあれば書き込み、無ければ無視
	{
		fread(&save, 1, sizeof(GROUNDSAVEDATA), fp);	// 指定したアドレスへ指定したバイト数分ファイルから読み込む
		fclose(fp);								// Openしていたファイルを閉じる

		// セーブデータから各ワークへロードする
		{	// プレイヤーデータをロードする
			PLATFORM *platform = GetPlatform();
			DX11_MODEL temp;
			int collideridx;

			// プレイヤーの人数分ロードする
			for (int i = 0; i < MAX_PLATFORM; i++)
			{
				temp = platform[i].model;
				collideridx = platform[i].colliderIdx;

				platform[i] = save.platform[i];
				
				platform[i].model = temp;
				platform[i].colliderIdx = collideridx;
			}
		}

		printf("終了！\n");
		return true;
	}
	else
	{
		printf("ファイルエラー！\n");
		return false;
	}


}



